libCpScript ObjectBasic Reference Manual
(c) 2013 Jason Doyle, All Rights Reserved
Email: jdoyle1983@gmail.com

I...........Overview
II.........Language Syntax
	A...........Pre-Processor Directives
	    1...........#HostFunction
		2...........#Include
		3...........#Lib
		4...........Comments
    B...........Variables
	    1...........General Variables
		2...........Class Variables
	C...........Operators
	    1...........Numeric Operators
		2...........String Operators
		3...........Logical Operators
	D...........Control Flow
	    1...........Function Declaration
	    2...........Function Calls
		3...........Conditional Execution
	E...........Loops
	    1...........While Loop
		2...........For Loop
	F...........Classes
	    1...........Defining a Class
		2...........Accessing Class Properties
		3...........Accessing Class Methods
	G...........Classes Advanced
	    1...........Extending Existing Classes
		2...........Static Class Methods
	H...........The Standard Library
	    1...........ConsoleIO
		2...........FileIO
		3...........Math
		4...........Utilities
		    a...........Array Class
III.........Example Code


Forward
		This document assumes a basic understanding of programming.  This document
		is not intended to teach basic programming skills.  The only purpose of this
		document is define the libCpScript ObjectBasic language syntax.  As such,
		conecepts such as loops, conditional statements, and variables will not be
		expressly defined.
		
		*NOTE*
		libCpScript ObjectBasic is still very much in it's infancy stage.  It may
		have major fundamental changes in the future and therefore should not be
		considered production stable.


I.		Overview

		libCpScript ObjectBasic (lcsob) is a BASIC like language, with full
		object support.  It compiles into libCpScript Assembly.  It supports
		extending of classes.

II.		Language Syntax

		A.	Pre Processor Directives
			
			These directives can be used to instruct the compiler about additional
			resources availble to the script.

				1. 	#HostFunction [FUNC]
				
					Informs the compiler there is a host function that 
					will be implemented at a later time. This is required 
					to allow the parser to recognize a function name as 
					a function, rather than a literal string.
				
				2.	#Include [PATH]
				
					Include additional script code into this script.  This
					script must be relative to the executing host 
					application.
				
				3.	#Lib [PATH]
				
					Include a library in this script. This script must be
					relative to the executing host application.
					
				4.	Comments
				
					If the first 2 non whitespace characters on a line begin
					with --, the entire line is treated as a comment, and
					ommited from compilation.
					
					Exmample:
					
					--My Comment
					     -- Another Comment
					
		B.	Variables
			
			Variables in lcsob are typeless (excluding class variables).  As
			such, there are no limitations to operations performed on a variable,
			even in cases where it may cause errors.  If you attempt to add 2
			variables, each typeless variable will be first converted to a double,
			and a typeless result is returned.  Currently, attempting a math
			operation on a string is undefined, and will more than likely crash
			the host application.  (This is a known short coming, and will be handled
			correctly before production release).
		
				1.	General Variables
					
					General variables are typeless values.  They become whatever type is necessary
					to perform an operation. (If you attempt a math operation, they will be converted
					to numbers to perform said operation).  Variables can be initialized without a
					value, or with any valid operation syntax.  A variable defined with no initial
					value will have the equivilant of a blank string for a value.
					
					Un-Initialized Declaration:
					VAR MyVar
					
					Declaration With Initial Value:
					VAR MyVar = 1
					VAR MyVar = "Hello"
					VAR MyVar = 32 + 82
					VAR MyVar = MyFunction(32, 82)
					VAR MyVar = 23 + (-23 * (84 / MyOtherVar) + 2)
				
				2.	Class Variables
				
					Class variables are always declared Un-Initialized.  There is a required init method
					for each class that will get called upon declaration.  Please See II.F.1 for details
					on defining a class.
					
					Class Variable Declaration:
					
					CLASSNAME MyClassVar
				
				
		C.	Operators
		
			Operators allow you to manipulate variables within the script, here is a
			table of all operators in lcsob:			
		
				1.	Numeric Operators
				
					Variables are converted to double precision values, then the math operations
					are then performed.
				
					+				Add 2 values
					-				Subtract 2 values
					*				Multiply 2 values
					/				Divide 2 values
					%				Divide 2 values, return the remainder
				
				2.	String Operators
				
					Variables are converted to strings, then the string operations are performed.
				
					..				Concat 2 strings
				
				3.	Logical Operators
				
					Variables are converted to booleans, then the logical operations are performed.
				
					==				Return true if values are the same, otherwise false
					!=				Return true if values are not the same, otherwise false
					>				Return true if value1 is greater than value2, otherwise false
					>=				Return true if value1 is greater than or equal to value2, otherwise false
					<				Return true if value1 is less than value2, otherwise false
					<=				Return true if value1 is less than or equal to value2, otherwise false
					!				Invert bool value (false->true, true->false)
					&&				Return true if value1 is true and value2 is true
					||				Return true if value1 is true or value2 is true
				
				
		D.	Control Flow
		
				1.	Function Declaration
				
					Functions can be declared with or without parameters, and with or without a return
					value.  Since all variables are typeless, only the parameter name is required as a 
					placeholder.  One additional notation is available when passing a class instance as
					a parameter, it is required to tell the compiler what kind of class object is being
					passed.
					
					Examples:
					
					FUNCTION MyParameterlessFunctionWithNoReturn()
						-- Do something
					END FUNCTION
					
					FUNCTION MyFunctionWithNoReturn(value1, value2)
						VAR Value3 = value1 + value2
					END FUNCTION
					
					FUNCTION MyFunctionWithReturn(value1, value2)
						RETURN value1 + value2
					END FUNCTION
					
					FUNCTION MyFunctionWithClass(value1, value2:MyClass, value3, value4:MyOtherClass)
						-- value2 is an instance of class MyClass
						-- value4 is an instance of class MyOtherClass
					END FUNCTION
				
				2.	Function Calls
				
					Calling functions is fairly straight forward.
					Using the above functions, here are some examples:
					
					FUNCTION Main()
					
						MyClass myClassInstance
						MyOtherClass myOtherClassInstance
						VAR Value1 = 10
						VAR Value2 = 20
						
						MyParameterlessFunctionWithNoReturn()
						MyFunctionWithNoReturn(Value1, Value2)
						VAR Value3 = MyFunctionWithReturn(Value1, Value2)
						MyFunctionWithClass(Value1, myClassInstance, Value2, myOtherClassInstance)
					
					END FUNCTION
				
				3.	Conditional Execution
				
					Conditional execution in lcsob is fairly simple.  It supports a simple
					IF-THEN-ELSE IF-THEN-ELSE-END IF structure.  Each condition can utilize
					logical OR and AND operators.
					
					Example:
					
					VAR Value1 = 10
					VAR Value2 = 20
					
					IF (Value1 >= 10 && Value2 <= 20) || (Value2 >= 10 && Value2 <= 30) THEN
						-- Do Something
					ELSE IF Value1 != 10 THEN
						-- Do Something
					ELSE IF Value2 != 20 THEN
						-- Do Something
					ELSE
						-- Do Something
					END IF
				
				
		E.	Loops
				
				1.	While Loop
				
					While loops use a simple condition check loop.
					
					Example:
					
					WHILE(Value1 < 10)
						Value1 = Value1 + 1
					LOOP
				
				2.	For Loop
				
					With a for loop, the loop index variable must be declared
					prior to use.  In addition, you can supply a stepping value
					to increment the loop by each iteration.  If no stepping
					value is supplied and + 1 at each iteration is implied.
					
					Examples:
					
					VAR loopStart = 1
					VAR loopEnd = 100
					VAR loopVar = 0
					VAR loopInc = 5
					
					FOR loopVar = 1 TO 100 STEP + 1
					LOOP
					
					FOR loopVar = 100 TO 1 STEP - 1
					LOOP
					
					FOR loopVAr = 1 TO 100
						-- STEP + 1 is implied
					LOOP
					
					FOR loopVar = loopStart TO loopEnd STEP + loopInc
						-- Given the var values it will loop from 1 to 100 stepping + 5 each iteration
					LOOP
				
				
		F.	Classes
		
				1.	Defining a Class
				
					Classes can be easily defined as long as a few simple rules are followed.
						* Each class capable of an instance must define the Init method.
						* Initial property values should be set within the Init method.
						* Classes cannot currently contain properties that are other class instances.
						* The 2 reserved keywords within a class are PROP and METHOD.
						* A PROP is a class property (a typeless variable, that retains it's value
						  within the class).
						* A METHOD is a function that has access to the classes local properties.
						* Method parameters follow all the same rules as function parameters (type hinting, etc.)
						
					Defining a class:
					
					CLASS MyBaseClass
						PROP MyObjectId
						PROP AddedVal
						
						METHOD Init()
							MyObjectId = -1
							AddedVal = 0
						END METHOD
						
						METHOD AddSomeValue(toaddvalue)
							AddedVal = AddedVal + toaddvalue
						END METHOD
						
						METHOD ReadSomeValue()
							RETURN AddedVal
						END METHOD
					END CLASS
				
				2.	Accessing Class Properties
				
					Using the example class above, here is how to create an instance of, and access
					the properties of the class:
					
					MyBaseClass myInstance
					
					VAR currentObjectId = myInstance.MyObjectId
					
					myInstance.MyObjectId = 10
				
				3.	Accessing Class Methods
				
					Using the example class above, here is how to call a method of a class instance:
					
					MyBaseClass myInstance
					
					myInstace.AddSomeValue(10)
					myInstace.AddSomeValue(15)
					VAR totalVal = myInstance.ReadSomeValue()
				
				
		G.	Classes Advanced
		
				1.	Extending Existing Classes
				
					You can extend a class from an existing class.  It will automatically have available
					all properties and methods of it's parent class (this continues all the way up to
					the original base class).
					
					In addition, you can override parent class methods.  Once a class has overriden a parent
					method, and derivitives of this class, will used the overriden method.
					
					When an instance of a derived class is created, it starts at the base class, and calls
					the init method of each derived class in the chain.
					
					Example:
					
					CLASS MyExClass EXTENDS MyBaseClass
						PROP NewProp
						
						METHOD Init()
							NewProp = 15
						END METHOD
						
						METHOD OVERRIDE AddSomeValue(toaddvalue)
							AddedVal = AddedVal + (toaddvalue * 2)
						END METHOD
					END CLASS
					
					CLASS My2ExClass EXTENDS MyExClass
						METHOD Init()
						END METHOD
					END CLASS
					
					CLASS MyOtherExClass EXTENDS MyBaseClass
						METHOD Init()
						END METHOD
					END CLASS
					
					Give the above example, if you create an instance of MyExClass, and call the AddSomeValue
					method of this instance, it will use the one defined in MyExClass.  An instance of My2ExClass
					will call the MyExClass override method of AddSomeValue as well.  An instance of MyOtherExClass
					however will call the AddSomeValue method defined in MyBaseClass.
					
					An instance of MyExClass will have the following properties available:
						* MyObjectId
						* AddedValue
						* NewProp
						
					An instance of My2ExClass will have the following properties available:
						* MyObjectId
						* AddedValue
						* NewProp
						
					An instance of MyOtherExClass will have the following properties available:
						* MyObjectId
						* AddedValue
				
				2.	Static Class Methods
				
					Static methods can be defined for a class.  These methods follow the static
					method procedure found in most languages:
						* You cannot use the dot notation of an instance to access a static method.
						* Static methods do not have access to instance properties.
						* You must use the dot notation with the class name to call a static method
						
					Example:
					
					CLASS MyClass
						PROP MyObjectId
						
						METHOD Init()
						END METHOD
						
						METHOD STATIC MyStaticMethod(value1, value2)
							-- This function does not have access to MyObjectId
							RETURN value1 + value2
						END METHOD
					END CLASS
					
					MyClass myClassInstance
					--WRONG
					VAR newValue = myClassInstance.MyStaticMethod(10, 10)
					--RIGHT
					VAR newVAlue = MyClass.MyStaticMethod(10, 10)
				
				
		H.	The Standard Library
		
				1.	ConsoleIO
				
					All console methods are located as static methods of the
					Console class.
					
					Console.Write(val)
						Write a value to the console
						
					Console.WriteLine(val)
						Write a value to the console, move to next line.
						
					Console.ReadLine()
						Prompts to enter characters in the console window.  Once
						the return key is pressed, it returns all entered keys
						from this function
				
				2.	FileIO
				
					File IO requires creating an instace of the File class.
					Once the an instance is created, you can open / create files and
					manipulate them using the following methods:
					
					fileInstance.OpenRead(FilePath)			
						Opens Existing File For Reading Text
						
					fileInstance.OpenWrite(FilePath)
						Opens / Creates File For Writing Text
						
					fileInstance.OpenBinaryRead(Filepath)
						Opens Existing File For Binary Reading
						
					fileInstance.OpenBinaryWrite(FilePath)
						Opens / Creates File For Binary Writing
					
					fileInstance.WriteLine(TextToWrite)
						Write text to a file opened with OpenWrite
						
					fileInstance.ReadLine()
						Read text line from a file opened with OpenRead
						
					fileInstance.WriteInt(IntVal)
						Write int to file opened with OpenBinaryWrite
						
					fileInstance.ReadInt()
						Read int from file opened with OpenBinaryRead
						
					fileInstance.WriteDouble(DoubleVal)
						Write double to file opened with OpenBinaryWrite
						
					fileInstance.ReadDouble()
						Read double from file opened with OpenBinaryRead
						
					fileInstance.WriteBool(BoolValue)
						Write bool to file opened with OpenBinaryWrite
						
					fileInstance.ReadBool()
						Read bool from file opened with OpenBinaryRead
						
					fileInstance.WriteString(StrValue)
						Write string to file opened with OpenBinaryWrite
					
					fileInstance.ReadString()
						Read string from file opened with OpenBinaryRead
					
					fileInstance.Eof()
						Returns true if at end of file, only valid for Read files
						
					fileInstance.Close()
						Close the file
				
				3.	Math
				
					All math methods are located as static methods of the
					Math class.
					
					Math.ABS(param)
						Returns the absolute value of param
						
					Math.FLOOR(param)
						Rounds down the value of param
						
					Math.CEILING(param)
						Rounds up the value of param
				
				4.	Utilities
						
						a. 	Array Class
							
							You must create an instance of the array class. Once
							this has been created, you can manipulate the array
							with the following methods:
							
							arrayInstance.Alloc(size)
								Initialize an array of size length
								
							arrayInstance.Free()
								Cleanup and free all array resources
								
							arrayInstance.Resize(newSize)
								Change the size of the array.
								
							arrayInstance.Size()
								Returns the current size of the array
								
							arrayInstance.SetItem(itemIndex, itemValue)
								Set array item at itemIndex to the value in itemValue
								
							arrayInstance.GetItem(itemIndex)
								Return the value of the array item at itemIndex
				
				
III.	Example Code

		#HostFunction ParamCheck
		#include Lib/ConsoleIO.obh
		#include Lib/FileIO.obh
		#include Lib/Math.obh

		CLASS BaseObject
			PROP ObjectId
			
			METHOD Init()
				ObjectId = 0
			END METHOD
		END CLASS

		CLASS String EXTENDS BaseObject
			PROP Value
			
			METHOD Init()
				ObjectId = 1
			END METHOD
		END CLASS

		CLASS StringBuilder EXTENDS String
			METHOD Init()
				ObjectId = 2
			END METHOD
			
			METHOD Append(val)
				Value = Value .. val
			END METHOD

			METHOD AppendLine(val)
				Value = Value .. val .. "\n"
			END METHOD
		END CLASS

		CLASS TestClass1
			METHOD Init()
			END METHOD
			
			METHOD ShouldDoSomething(myval)
				Console.WriteLine(myval)
			END METHOD
		END CLASS

		CLASS TestClass2
			METHOD Init()
			END METHOD
			
			METHOD DoSomething(myitem:TestClass1)
			
				myitem.ShouldDoSomething("Test Line")
			
			END METHOD
		END CLASS

		FUNCTION Main()

			TestClass1 ts1
			TestClass2 ts2
			ts2.DoSomething(ts1)

			File f1
			f1.OpenWrite("output.txt")
			f1.WriteLine("Line 1")
			f1.WriteLine("Line 2")
			f1.Close()
			File f2
			f2.OpenRead("output.txt")
			Console.WriteLine(f2.ReadLine())
			Console.WriteLine(f2.ReadLine())
			f2.Close()
			
			Console.WriteLine("Function Main() Start")
			ParamCheck("1","2","3","4","5")
			StringBuilder builder
			builder.AppendLine("Line 1")
			builder.AppendLine("Line 2")
			builder.AppendLine("Line 3")
			builder.AppendLine("Live 4")
			Console.WriteLine(builder.Value)
			Console.WriteLine("Enter a String: ")
			VAR Input = Console.ReadLine()
			Console.Write("You Entered: ")
			Console.WriteLine(Input)
			Console.WriteLine("Goodbye.")
			Console.WriteLine("Function Main() End")
			
			VAR myVar
			myVar = 189 * (232 / 34 + 83 - 34) * 45
			Console.WriteLine(myVar)
			
			VAR myVar2 = 8 % 3
			Console.WriteLine(myVar2)
			
			Console.WriteLine(Math.ABS(-23))
			
			VAR myVar3 = 125 * ((4 + 3) * (-(28 - 4) * 5) + 88)
			Console.WriteLine(myVar3)
		END FUNCTION







		Example Code: Fibonacci Sequence:
		#include Lib/ConsoleIO.obh

		FUNCTION Main()
			Console.Write("Enter Fibonacci Sequence Iteration Count: ")
			VAR fibMax = Console.ReadLine()
			VAR f1 = 0
			VAR f2 = 0
			VAR f3 = 0
			VAR i = 0
			FOR i = 1 to fibMax
				IF i == 1 THEN
					f1 = 1
					Console.WriteLine("Seq " .. i .. ": " .. f1)
				ELSE IF i == 2 THEN
					f2 = 1
					Console.WriteLine("Seq " .. i .. ": " .. f2)
				ELSE
					f3 = f1 + f2
					Console.WriteLine("Seq " .. i .. ": " .. f3)
					f1 = f2
					f2 = f3
				END IF
			NEXT
		END FUNCTION
